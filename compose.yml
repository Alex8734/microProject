version: '3.8'

services:
  # Docker daemon service that exposes the Docker API

  docker-client-check:
    image: docker:cli
    container_name: docker-client
    volumes:
      - //./pipe/docker_engine:/var/run/docker.sock
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    command: ["docker", "version"]
    networks:
      - app-network

  # Frontend Angular service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - app-network
    # We'll use Caddy to serve the frontend

  # Migration Service f√ºr Backend
  backend-migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile.migrate
    container_name: backend-migrate
    depends_on:
      postgres:
        condition: service_started
    networks:
      - app-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Production

  # Backend ASP.NET Core API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_started
      backend-migrate:
        condition: service_completed_successfully
      docker-client-check:
        condition: service_completed_successfully
      simulator:
        condition: service_started
    volumes:
      - ./appsettings.json:/app/appsettings.json
      - //./pipe/docker_engine:/var/run/docker.sock # For Docker integration
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - "5000:5000"
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=MxDb
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  # Caddy as reverse proxy/ingress
  caddy:
    image: caddy:2-alpine
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy-data:/data
      - caddy-config:/config
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  # Simulator service
  simulator:
    build:
      context: ./simulator
      dockerfile: Dockerfile
    container_name: simulator
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  caddy-data:
  caddy-config:
  docker-data: